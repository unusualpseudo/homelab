---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: minio
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.3.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    controllers:
      minio:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: quay.io/minio/minio
              tag: RELEASE.2024-06-29T01-20-47Z@sha256:fce0a90a37bb2887c850b68b61a0ac8ac02ea218b58eaea96bb7ca69eb503e20
            env:
              MINIO_API_CORS_ALLOW_ORIGIN: "https://minio.${CLUSTER_DOMAIN},https://s3.${CLUSTER_DOMAIN}"
              MINIO_BROWSER_REDIRECT_URL: "https://minio.${CLUSTER_DOMAIN}"
              MINIO_SERVER_URL: ""
              MINIO_PROMETHEUS_URL: "http://kube-prometheus-stack-prometheus.monitoring:9090"
              MINIO_PROMETHEUS_JOB_ID: minio
              MINIO_PROMETHEUS_AUTH_TYPE: public
              MINIO_UPDATE: "off"
            envFrom:
              - secretRef:
                  name: minio-secret
            args: [ "server", "/data", "--console-address", ":9001" ]
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /minio/health/live
                    port: 9000
                  initialDelaySeconds: 30
                  periodSeconds: 30
                  timeoutSeconds: 10
                  failureThreshold: 6
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: [ "ALL" ] }
            resources:
              requests:
                memory: 100Mi
                cpu: 50m
              limits:
                memory: 750Mi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 442
        runAsGroup: 442
        fsGroup: 442
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [ 442 ]
        seccompProfile: { type: RuntimeDefault }
    service:
      app:
        controller: minio
        ports:
          http:
            primary: true
            port: 9001
          s3:
            enabled: true
            port: 9000
    serviceMonitor:
      app:
        serviceName: minio
        endpoints:
          - port: s3
            scheme: http
            path: /minio/v2/metrics/cluster
            interval: 1m
            scrapeTimeout: 10s
    ingress:
      app:
        className: internal
        hosts:
          - host: &console-host  "{{ .Release.Name }}.${CLUSTER_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
          - host: &api-host "s3.${CLUSTER_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: s3
        tls:
          - hosts:
              - *console-host
              - *api-host
            secretName: "tls.${CLUSTER_DOMAIN/./-}"
    persistence:
      config:
        type: nfs
        server: ${NFS_BACKUP_SERVER_ADDR}
        path: "${NFS_BACKUP_FOLDER}/Minio"
        globalMounts:
          - path: /data
